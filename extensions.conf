[sipout]
exten => _[8].,1,Dial(SIP/${EXTEN}@sip.messagenet.it)

[robertout]
;mashera il callerid (-> restituisce indirizzo privato; vedi anche altre opzioni)
exten => _[035].,1,Set(CALLERPRES()=prohib_not_screened)
exten => _[035].,n,Set(NR_CHIAMATO=${EXTEN})  
exten => _[035].,n,Dial(SIP/${EXTEN}@roberto)
;in caso di trunk non disponibile utilizzo il secondo trunk
exten => _[035].,n,NoOp("Errore trunk -> failover!")  
;utilizzo il valore di DIALSTATUS per discriminare l'errore restituito dal trunk
; occorre verificare di gestire tutte le casistiche, ovvero tutti i valori di DIALSTATUS
; per eseguire i test in lab, abbiamo impedito la regitrazione del trunk robero, quindi DIALSTATUS restituisce CHANUNAVAIL
exten => _[035].,n,Goto(s-${DIALSTATUS},1) 
exten => s-CHANUNAVAIL,1,Dial(SIP/${NR_CHIAMATO}@sip.messagenet.it)
exten => s-CONGESTION,1,Dial(SIP/${NR_CHIAMATO}@sip.messagenet.it)


[robertoin]
exten => 05411646429,1,Goto(menu-apertura,s,1)

[sipin]
; == sulla base del caller id mando ad una extension differente ==
;    In questo caso, tutte le chiamate provenienti da sipin vengono intercettate dal primo pattern
;    e quindi vengono inviate tramite Goto ad una delle estensioni successive: ${CALLERID(num)}
exten => 05411646656,1,Goto(${CALLERID(num)},1)

;    se il caller id è +39335204675 allora chiama l'extension SIP/6001
exten => +39335204675a,1,Dial(SIP/6001)

;    nei casi in cui non vi è un match del pattern controllo l'orario di apertura
exten => _[+08].,1,GotoIfTime(9:00-17:00,mon-fri,*,*?open,1:close,1)

exten => open,1,Goto(menu-apertura,s,1)

exten => close,1,NoOp("chiuso!")
exten => close,n,Playback(goodbye) ; da sostituire con messaggio "uffici chiusi"
exten => close,n,Voicemail(6000@voiceall,u)
exten => close,n,Hangup()

[interni]
; == versione semplice -> se non risponde manda a Voicemail ==
;exten => _6XXX,1,Dial(SIP/${EXTEN},20,r)
:exten => _6XXX,n,Voicemail(${EXTEN},u)          
;exten => s,n,Hungup()

; == versione avanzata -> discrimino lo stato per Voicemail e uso macro ==
exten => _6XXX,1,Macro(ricevi,SIP/${EXTEN},${EXTEN},${CALLERID(num)})


exten => h,1,NoOP(MYDEBUG->HANGUP->${DIALSTATUS})


; ==  per accedere alla Voicemail digitare *99* ==
exten => *99*,1,VoiceMailMain(${CALLERID(num)}@voiceall,s)

[macro-ricevi]
; ${ARG1} - extension chiamata (esempio: SIP/6001)
; ${ARG2} - Mailbox (generalmente lo stesso valore di ${EXTEN}
; ${ARG3} - extension chiamante (esempio: 6000)

; == Questi comandi permettono di dovrascrivere il caller id ==
;exten => s,1,Set(CALLERID(num="pippo"))
;exten => s,1,Set(CALLERID(name)="pippo")
;exten => s,1,Set(CALLERID(all)="pippo")

; == Questo comando permette di mascherare il caller id, che viene quindi presentato come numero sconosciuto ==
;exten => s,1,Set(CALLERPRES()=prohib_not_screened)

exten => s,1,Dial(${ARG1},15,kKrRtT)         ;squilla verso l'extension per 20sec
exten => s,n,NoOP(MYDEBUG->${DIALSTATUS} - ${HANGUPCAUSE})
exten => s,n,Goto(s-${DIALSTATUS},1)  ; discrimina lo stato
exten => s-NOANSWER,1,VoiceMail(${ARG2}@voiceall,u)    ;u=unavailable message




# in caso di occupato fa partire la voicemail
#exten => s-BUSY,1,VoiceMail(${ARG2}@voiceall,b)        ;b=busy message

# in caso di occupato chiama la macro di callback
# passo alla macro 2 parametri che sono rispettivamente:
#   numero del chiamato
#   numero del chiamante
exten => s-BUSY,1,Macro(callfile,${ARG2},${ARG3})      ;b=>callback

exten => s-ANSWER,1,Hangup()                  ;hangup dopo una risposta
exten => s-.,1,Goto(s-NOANSWER,1)             ;azione di default


[all]
include =>robertout
include => sipout
;include => sipin
;include => robertoin
include => parkedcalls
include => interni

[menu-apertura]
exten => s,1,Set(MENU_COUNT=0)
exten => s,n,Answer()
exten => s,n(message),Background(benvenuto)
; attende la digitazione di un interno
exten => s,n,WaitExten(5)
; se scade il tempo di attesa processo le righe seguenti

;incremento il counter
exten => s,n,Set(MENU_COUNT=$[${MENU_COUNT}+1])
exten => s,n,NoOp("Counter = " ${MENU_COUNT})

; se counter > 2 allora salta all'hangup, in caso contrario torna ad eseguire il menu
exten => s,n,GotoIf($[${MENU_COUNT} > 2]?hangup:message)

exten => s,n(hangup),NoOp("Butto giu")
exten => s,n(hangup),Hangup()


; se digito 1 vado alla coda "amministrazione"
exten => 1,1,Queue(amministrazione)
; se digito 2 vado alla coda "supporto"
exten => 2,1,Queue(support)

; nel caso digito #1 chiamo direttamente l'interno 600; nel caso digito #1 chiamo direttamente l'interno 60000
exten => #1,1,Dial(SIP/6000)

; se digito altri numeri rieseguo il menu
exten => _.,1,Goto(s,1)



;;TEMPLATE PER UN MENU INTERATTIVO

;E allora ecco lo stesso IVR ripresentato in forma compatta con l'uso di una variabile ({EXTEN}) e del pattern matching (_[1-3]) :
;[Chiamata_in_Ingresso] ;Definizione del contesto
;exten => s,1,Answer() 	;Quando la chiamata arriva al sistema, questo risponde e
;exten => s,n,Background(msg_di_benvenuto) ;manda in riproduzione un messaggio di benvenuto che invita l'utente a digitare una postselezione poi
;exten => s,n,WaitExten(10) ;attende la scelta dell'utente e
;exten => _[1-3],1,Dial(SIP/20${EXTEN},20) ;in relazione alla digitazione dell'utente instrada la chiamata all'interno relativo, attende 20 secondi e
;exten => _[1-3],n, Playback(msg_utente_assente) ;se non c'è risposta, riproduce un messaggio di utente non disponibile poi
;exten => _[1-3],n,Hangup() ;la chiamata viene conclusa
;exten => t,1,Playback(msg_arrivederci) ;in caso di timeout nella scelta dell'interno, viene riprodotto un  msg di arrivederci poi
;exten => t,n,Hangup() ;la chiamata viene conclusa



[macro-callfile]
# la macro callfile crea un call file nella directory /var/spool/asterisk/outgoing
# in modo da eseguire i tentativi di richiamata
# La macro riceve 2 parametri che sono rispettivamente:
#  ${ARG1} -  numero del chiamato
#  ${ARG2} -  numero del chiamante
#
# Se il chiamato, una volta liberatosi, risponde al telefono, allora si passa al
# dialplan specificato dal context del file (callback)
# All'interno di tale context di esegue il Dial del chiamante

exten => s,1,System(echo 'Channel: SIP/${ARG1}' > /var/spool/asterisk/${ARG1}-${ARG2}.call)
exten => s,n,System(echo 'Context: callback' >> /var/spool/asterisk/${ARG1}-${ARG2}.call)
exten => s,n,System(echo 'Extension: s' >> /var/spool/asterisk/${ARG1}-${ARG2}.call)
exten => s,n,System(echo 'MaxRetries: 3' >> /var/spool/asterisk/${ARG1}-${ARG2}.call)
exten => s,n,System(echo 'RetryTime: 10' >> /var/spool/asterisk/${ARG1}-${ARG2}.call)
exten => s,n,System(echo 'WaitTime: 20' >> /var/spool/asterisk/${ARG1}-${ARG2}.call)
exten => s,n,System(echo 'Set: CHIAMANTE=SIP/${ARG2}' >> /var/spool/asterisk/${ARG1}-${ARG2}.call)
exten => s,n,System(echo 'Archive: yes' >> /var/spool/asterisk/${ARG1}-${ARG2}.call)

exten => s,n,System(mv /var/spool/asterisk/${ARG1}-${ARG2}.call /var/spool/asterisk/outgoing/)
exten => s,n,Hangup

[callback]
exten => s,1,Answer()
exten => s,n,Wait(1)
exten => s,n,Dial(${CHIAMANTE})
exten => s,n,Hangup
